---
import ProjectLayout from "../../../layouts/ProjectLayout.astro";
import type { Props } from "astro/components/ViewTransitions.astro";
import { app } from "../../../firebase/client";
import { collection, query, where, doc, getDoc, getDocs } from "firebase/firestore";
import { getFirestore } from "firebase/firestore";
import "firebase/firestore";
import type DatabaseSource from "../../../lib/source_database";
import type Tag from "../../../lib/tags";
import NotecardSearch from "../../../components/NotecardSearch.astro";

const {user} = Astro.locals;

const db = getFirestore(app);

async function get_user_tags() {
  const tags_ref = doc(db, "Tags", user.uid);

  return getDoc(tags_ref)
    .then((tags_snapshot) => {
      const user_tags = tags_snapshot.data()?.tags || [];
      return user_tags;
    })
    .catch((error) => {
      console.error("Error getting user tags:", error);
      throw error; // Re-throw the error to handle it later
    });
}

const user_tags = get_user_tags()
  .then((user_tags) => {
    return user_tags;
  })
  .catch((error) => {
    console.error("Error:", error);
  });

async function get_user_sources() {
  const sources_ref = query(collection(db, "Sources"), where("student_id", "==", user!.uid));

  return getDocs(sources_ref)
    .then((sources_snapshot) => {
      const user_sources = sources_snapshot.docs.map((doc) => ({
        primary_id: doc.id,
        source: doc.data(),
      })) as DatabaseSource[];
      return user_sources;
    })
    .catch((error) => {
      console.error("Error getting user sources: ", error);
      throw error;
    });
}

const user_sources = get_user_sources()
  .then((user_sources) => {
    return user_sources;
  })
  .catch((error) => {
    console.error("Error while getting user sources", error);
  });
---

<ProjectLayout title="Notecards">
  <div id="Page">
    <form class="form">
      <input
        type="search"
        id="search"
        name="search"
        placeholder="Search Notecards"
      />
      <div class="dropdown">
        <button class="dropbtn">Select Tags</button>
        <div class="dropdown-content">
          {
            Promise.resolve(user_tags).then((tags) =>
              tags.map((tag: Tag) => (
                <label>
                  <input type="checkbox" value={tag.tag_id} /> {tag.name}
                </label>
              )),
            )
          }
        </div>
      </div>

      <select id="sources" name="sources">
        <option disabled selected> -- select a source to filter by -- </option>
        {
          Promise.resolve(user_sources).then((sources) =>
            sources!.map((source: DatabaseSource) => (
              <option value={source.primary_id}>
                {'"' +
                  source.source.title +
                  '"' +
                  " || " +
                  (source.source.full_citation.slice(0, 50) +
                    (source.source.full_citation.length >= 50 ? "..." : ""))}
              </option>
            )),
          )
        }
      </select>
      <button type="submit" class="submit-button"> Search </button>
      <button type="reset" class="reset-button"> Reset </button>
    </form>
    <NotecardSearch
      sources={user_sources},
      tags={user_tags},
      user={user}
    />
  </div>
  
  
  
  <a href="notecards/tags" class="add-tag-button">
    <svg
      class="w-[40px] h-[40px] text-gray-800 dark:text-white"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      width="40"
      height="40"
      fill="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        d="M18.045 3.007 12.31 3a1.965 1.965 0 0 0-1.4.585l-7.33 7.394a2 2 0 0 0 0 2.805l6.573 6.631a1.957 1.957 0 0 0 1.4.585 1.965 1.965 0 0 0 1.4-.585l7.409-7.477A2 2 0 0 0 21 11.479v-5.5a2.972 2.972 0 0 0-2.955-2.972Zm-2.452 6.438a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"
      ></path>
    </svg>
  </a>
  <a href="notecards/add" class="add-notecard-button">
    <svg
      class="w-[48px] h-[48px] text-gray-800 dark:text-white"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      width="40"
      height="40"
      fill="none"
      viewBox="0 0 24 24"
    >
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="3"
        d="M5 12h14m-7 7V5"></path>
    </svg>
  </a>
</ProjectLayout>

<script>
  const buttons = document.querySelectorAll("button.reset-button");

  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      window.location.assign("/project/notecards");
    });
  });

  let selected_source = "";

  document.getElementById("sources")!.addEventListener("change", function () {
    selected_source = (this as HTMLInputElement).value;
  });

  const checkboxes = document.querySelectorAll(
    '.dropdown-content input[type="checkbox"]',
  );
  const selected_tags: string[] = [];

  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", () => {
      if ((checkbox as HTMLInputElement).checked) {
        selected_tags.push((checkbox as HTMLInputElement).value);
      } else {
        const index = selected_tags.indexOf(
          (checkbox as HTMLInputElement).value,
        );
        if (index > -1) {
          selected_tags.splice(index, 1);
        }
      }
    });
  });

  const form = document.querySelector("form");
  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    const search = new FormData(form).get("search")?.toString();
    const url = new URL("/project/notecards", window.location.origin);

    if (search && search.length != 0) url.searchParams.set("search", search);
    if (selected_source != "") url.searchParams.set("source", selected_source);
    if (selected_tags.length > 0 && selected_tags != undefined)
      url.searchParams.set("tags", selected_tags.join("_"));
    window.location.assign(url.toString());
  });
</script>

<style>
  #Page {
    right: 0;
    margin-top: 0.1rem;
    width: 100%;
    text-align: center;
    align-items: center;
  }

  .add-tag-button {
    right: 0.5rem;
    bottom: 5.5rem;
  }

  .add-notecard-button {
    right: 0.5rem;
    bottom: 1.5rem;
  }

  a {
    background-color: var(--color-primary-200);
    display: flex;
    position: fixed;

    text-align: center;
    border-radius: 100%;
    padding: 0.1rem;
    text-decoration: none;
    color: white;
    font-weight: 800;
    transition: 0.2s;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
  }

  a:hover {
    background-color: var(--color-primary-300);
    scale: 1.1;
  }

  a {
    color: white;
  }

  .add-notecard {
    display: flex;
    max-height: 18vh;
    height: 18vh;
    padding: 1px;
    background-color: var(--color-surface-mixed-300);
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    overflow: hidden;
  }

  .form {
    background: var(--color-surface-mixed-200);
    padding: 0.4rem;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: calc(100vw - 2rem - 40vw);
    margin: 0 auto;
    display: flex;
    flex-direction: row;
    gap: 1rem;
    margin-bottom: 1rem;
    justify-content: space-between;
  }

  .form input[type="search"] {
    background-color: rgb(0, 0, 0, 0.3);
    border: solid 1px gray;
    height: 100%;
    border-radius: 5px;
    transition: 0.2s;
    color: grey;
    padding: 10px;
    width: 45%;
    font-size: medium;
    box-sizing: border-box;
    position: relative;
  }

  .form select {
    background-color: rgb(0, 0, 0, 0.3);
    border: solid 1px gray;
    height: 100%;
    border-radius: 5px;
    transition: 0.2s;
    color: grey;
    padding: 10px;
    width: 30%;
    font-size: medium;
    box-sizing: border-box;
    position: relative;
  }

  .form input[type="search"]::placeholder {
    color: #aaa;
  }

  .form select {
    height: auto;
  }

  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background-color: rgb(0, 0, 0, 0.8);
    border-radius: 5px;
    border: 1px solid gray;
    min-width: 160px;
    color: whitesmoke;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    text-align: left;
  }

  .dropdown-content input[type="checkbox"] {
    color: white;
  }

  .dropbtn {
    min-width: 160px;
    background-color: rgb(0, 0, 0, 0.3);
    border: solid 1px gray;
    height: 100%;
    border-radius: 5px;
    transition: 0.2s;
    color: grey;
    padding: 10px;
    width: 30%;
    font-size: medium;
    box-sizing: border-box;
    position: relative;
  }

  .dropdown-content label {
    display: block;
    padding: 5px;
    cursor: pointer;
  }

  .dropdown-content label:hover {
    background-color: rgb(256, 256, 256, 0.2);
  }

  .dropdown-content input {
    margin-right: 5px;
    background-color: rgb(0, 0, 0, 0.3);
  }

  .dropdown:hover .dropdown-content {
    display: block;
  }

  .reset-button {
    padding: 10px;
    border: 1px solid red;
    background-color: red;
    border-radius: 4px;
    color: white;
    font-weight: 700;
  }

  .reset-button:hover,
  .submit-button:hover {
    cursor: pointer;
    scale: 1.1;
    opacity: 0.8;
  }

  .submit-button {
    padding: 10px;
    border: 1px solid var(--color-primary-200);
    background-color: var(--color-primary-200);
    border-radius: 4px;
    color: white;
    font-weight: 700;
  }
</style>
