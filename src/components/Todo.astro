---
import type Task from "../lib/task.ts"
import { app } from "../firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import type DatabaseTask from "../lib/task_database.ts"
import type { UserRecord } from "firebase-admin/auth";
import TodoUnfinished from "./TodoUnfinished.astro";
import TodoFinished from "./TodoFinished.astro";
import TodoAdd from "./TodoAdd.svelte";

interface Props {
  user: UserRecord;
}

const { user } = Astro.props;

const db = getFirestore(app);
const tasks_ref = db.collection("Tasks");

const tasks_snapshot = await tasks_ref
  .where("student_id", "==", user.uid)
  .get();

const user_tasks: DatabaseTask[] = tasks_snapshot.docs.map((doc) => ({
  primary_id: doc.id,
  task: doc.data(),
})) as DatabaseTask[];


user_tasks.sort((a, b) => {
        if (!a.task.due_date && !b.task.due_date) {
            return a.task.creation_date - b.task.creation_date;
        }
        if (!a.task.due_date) {
            return -1;
        }
        if (!b.task.due_date) {
            return 1;
        }
        return b.task.due_date - a.task.due_date;
    });

let done_tasks : DatabaseTask[] = [];
let undone_tasks : DatabaseTask[] = [];
user_tasks.forEach((task: DatabaseTask) => {
  if (task.task.completed) {
    done_tasks.push(task);
  } else {
    undone_tasks.push(task);
  }
});

---


<div class="container">
<h1> To-Do List </h1>
<div>
{
  undone_tasks.map((task : DatabaseTask) => (
    <TodoUnfinished task={task} />
  ))
}

<TodoAdd client:visible/>

<h2> {done_tasks.length > 0 ? "Completed Tasks" : ""} </h2>
<div>
{
  done_tasks.map((task : DatabaseTask) => (
    <TodoFinished task={task} />
  ))
}
</div>
</div >


<style> 
    .container {
        max-width: 80%;
        width: 80%;
        margin-left: 10%;
        margin-top: 1.8rem;
    }
    

    
    h2 {
        margin-top: 5rem;
    }
    
    @media only screen and (max-width: 800px) {
        form{
            flex-direction: column;
            text-align: center;
            justify-content: center;
            align-items: center;
            gap: 0.2rem;
            padding: 0.1rem;
        }
        
        form input {
            width: 100%;
        }
        
        form label {
            width: 90%;
            margin-bottom: 0.2rem;
            align-items: center;
            justify-content: center;
        }
        
        form button {
            width: 100%;
            margin: 0.2rem;
        }

    }
</style>